0x000: 30f00000000000000000 |     irmovq $0, %rax          # Load immediate 0 into %rax
0x00a: 30f30a00000000000000 |     irmovq $10, %rbx         # Load immediate 10 into %rbx
0x014: 30f10100000000000000 |     irmovq $1, %rcx          # Load immediate 1 into %rcx (loop counter)
                            | 
0x01e:                      | loop:
0x01e: 6030                 |     addq %rbx, %rax          # Increment %rax by %rbx
0x020: 2002                 |     rrmovq %rax, %rdx        # Move %rax to %rdx
                            | 
0x022: 30f60100000000000000 |     irmovq $1, %rsi          # Load immediate 1 into %rsi
0x02c: 6161                 |     subq %rsi, %rcx          # Decrement %rcx by 1
0x02e: 30f60000000000000000 |     irmovq $0, %rsi          # Reset %rsi to 0 for comparison
                            | 
                            |     # Use register value directly to control the loop: simple decrement and stop condition
0x038: 2016                 |     rrmovq %rcx, %rsi        # Copy %rcx to %rsi
0x03a: 741e00000000000000   |     jne loop                 # Continue loop if %rcx is not equal to %rsi (i.e., not zero)
                            | 
0x043:                      | end:
0x043: 00                   |     halt                     # Stop the program
